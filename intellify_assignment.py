# -*- coding: utf-8 -*-
"""Intellify_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EvPKAfp7gFVanMDg3fvkm_WeQDJLlgEk

###  Installing Required Libraries
"""

!pip install PyPDF2

"""###  Extracting text from the pdf file"""

import PyPDF2

def extract_text_from_pdf(pdf_path):
    text = ""
    with open(pdf_path, "rb") as file:
        reader = PyPDF2.PdfReader(file)
        num_pages = len(reader.pages)
        for page_number in range(num_pages):
            page = reader.pages[page_number]
            text += page.extract_text()
    return text

def save_text_to_file(text, output_file):
    with open(output_file, "w") as file:
        file.write(text)

# Replace 'path_to_your_pdf_file.pdf' with the actual path to your PDF file
pdf_text = extract_text_from_pdf("/content/Big Mac Index.pdf")

# Replace 'output_file.txt' with the desired name of your output text file
save_text_to_file(pdf_text, "output_file.txt")

!pip install langchain

!pip install transformers

"""### Installing required libraries to save the questions and answers in a pdf or word file"""

!pip install fpdf
!pip install pandas

"""###  Code for the random questions and answers"""

import random
import re
from transformers import pipeline
from fpdf import FPDF
import pandas as pd

# Load the question answering pipeline
qa_pipeline = pipeline("question-answering")

# Load the extracted text from the file
with open("/content/output_file.txt", "r", encoding="utf-8") as file:
    extracted_text = file.read()

# Define question templates
question_templates = [
    "What is '{sentence}'?",
    "How is '{sentence}'?",
    "Why did '{sentence}'?",
    "When did '{sentence}'?",
    "Where did '{sentence}'?",
    "Who is involved in '{sentence}'?",
    "Which '{sentence}'?"
]

# Extract sentences from the text
sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s', extracted_text)

# Filter out short sentences
sentences = [sentence for sentence in sentences if len(sentence.split()) > 5]

# Randomly select five sentences
selected_sentences = random.sample(sentences, 5)

# Generate questions and answers for each selected sentence
questions_answers = []
for sentence in selected_sentences:
    # Randomly select a question template
    question_template = random.choice(question_templates)
    # Generate question
    question = question_template.format(sentence=sentence)
    # Use the question answering pipeline to find the answer
    answer = qa_pipeline(question=question, context=extracted_text)
    # Format question and answer into a single line
    formatted_question = question.replace('\n', ' ')
    formatted_answer = answer["answer"].replace('\n', ' ')
    # Append question and answer to the list
    questions_answers.append((formatted_question, formatted_answer))

# Save questions and answers to a PDF file
pdf = FPDF()
pdf.add_page()
pdf.set_auto_page_break(auto=True, margin=15)
pdf.set_font("Arial", size=12)
for i, (question, answer) in enumerate(questions_answers, 1):
    pdf.multi_cell(0, 10, f"Question {i}: {question}", 0, "L")
    pdf.multi_cell(0, 10, f"Answer {i}: {answer}", 0, "L")
pdf.output("/content/random_questions.pdf", "F")

# Save questions and answers to an Excel file
df = pd.DataFrame(questions_answers, columns=["Question", "Answer"])
df.to_excel("/content/random_questions.xlsx", index=False)

